#!/usr/bin/env python

import rospy
import time
import os
import subprocess
import numpy as np

##################################################################################

# Name of UAV in VICON tracker:
UAV_NAME = "hawk2"

# User-defined image sample rate:
SAMPLE_RATE = 0.5   # hz

# User-define image log path:
PATH = "/home/mjnelson/catkin_ws/logs/jpg/"

##################################################################################

#
def get_timestamp(timestamps, counter):

    # Append timestamps with image 
    timestamps = np.vstack((timestamps, np.array([[f"{counter:04d}", time.time()]])))
    
    return timestamps

#
def get_file_name(counter):

    # Generate file name:
    name = "IMG" + f"{counter:04d}" + ".jpg"

    return name

#
def get_file_path(name):

    # Check if log path exists:
    if not os.path.exists(PATH):
        os.makedirs(PATH)

    # Generate file path:
    path = PATH + name

    return path

#
def get_image(path):

    # Generate shell command:
    command = "raspistill -o " + path
    
    # Execute shell command:
    subprocess.call(command, shell=True)

#
def log_timestamps(timestamps):

    #
    np.savetxt(PATH + "timestamps.csv", timestamps, delimiter=",", fmt="%s")

#
def main():
    
    # Initiate counter and time stamp storage:
    global timestamps
    timestamps = np.empty((0, 2))
    counter = 0

    # 
    rate = rospy.Rate(SAMPLE_RATE)
    while not rospy.is_shutdown():

        # Generate image timestamp:
        timestamps = get_timestamp(timestamps, counter)
        print(timestamps.shape)

        # Generate file name:
        name = get_file_name(counter)

        # Generate file path:
        path = get_file_path(name)

        # Log image:
        get_image(path)
        print(time.time())

        # Incremement counter:
        counter += 1
        rate.sleep()

##################################################################################

#
if __name__=="__main__":

    # Initialize node:
    rospy.init_node("sample_stills")

    #
    try:

        # Sample images:
        main()
        rospy.spin()

        #
        rospy.on_shutdown(lambda: log_timestamps(timestamps))

    except rospy.ROSInterruptException:
        pass
        

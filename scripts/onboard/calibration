#!/usr/bin/env python

import rospy
from geometry_msgs.msg import TransformStamped, Quaternion
from std_msgs.msg import Bool
import numpy as np
import json

##################################################################################

# Name of UAV in VICON tracker:
UAV_NAME = "hawk2"

# 
USER = "ubuntu"
NAME = "calibration.json"
PATH = "/home/" + USER + "/catkin_ws/src/messcv/json" + NAME

##################################################################################

#
def calibrateUAV():
    
    # Wait for message indicating first calibration step:
    print("Waiting for first calibration flag ...")
    rospy.wait_for_message("messop/messcv/calibrate1", Bool)
    print("Waiting for first VICON pose callback ...")
    vicon1 = rospy.wait_for_message("/vicon/" + UAV_NAME + "/" + UAV_NAME, TransformStamped)
    print("First VICON pose callback recieved.")

    # Wait for message indicating second calibration step:
    print("Waiting for second calibration flag ...")
    rospy.wait_for_message("messop/messcv/calibrate2", Bool)
    print("Waiting for second VICON pose callback ...")
    vicon2 = rospy.wait_for_message("/vicon/" + UAV_NAME + "/" + UAV_NAME, TransformStamped)
    print("Second VICON pose callback recieved.")

    # Retrieve position coordinates:
    print("Calibrating UAV to VICON environment ...")
    x1 = vicon1.transform.translation.x
    y1 = vicon1.transform.translation.y
    x2 = vicon2.transform.translation.x
    y2 = vicon2.transform.translation.y

    # True initial orientation:
    Rx0 = 0.0
    Ry0 = 0.0
    Rz0 = np.arctan2(y2 - y1, x2 - x1)
    Q0 = eul2quat(Rx0, Ry0, Rz0)

    # Measured initial orientation:
    Q1 = Quaternion()
    Q1.x = vicon1.transform.rotation.x
    Q1.y = vicon1.transform.rotation.y
    Q1.z = vicon1.transform.rotation.z
    Q1.w = vicon1.transform.rotation.w

    # Inverse of measured initial orientation:
    Q1_inv = quat_inv(Q1)

    # Transformation Quaternion:
    Q_diff = quat_multiply(Q1_inv, Q0)
    
    # Callback data should be transformed such that:
    # Q1_true = quat_multiply(Q_diff, Q1)

    # Write calibration .json file:
    print("Writing quat_cal.json ...")
    data = {"x": Q_diff.x, "y": Q_diff.y, "z": Q_diff.z, "w": Q_diff.w}
    with open(PATH, "w") as f:
        json.dump(data, f)
    print(NAME + " written to /home/ubuntu/catkin_ws/src/calibration.")

#
def eul2quat(Rx, Ry, Rz):

    # Sin and Cos of Euler angle input:
    cx = np.cos(0.5 * Rx)
    sx = np.sin(0.5 * Rx)
    cy = np.cos(0.5 * Ry)
    sy = np.sin(0.5 * Ry)
    cz = np.cos(0.5 * Rz)
    sz = np.sin(0.5 * Rz)

    # Quaternion form of Euler angle input:
    qnew = Quaternion()
    qnew.x = sx * cy * cz - cx * sy * sz
    qnew.y = cx * sy * cz + sx * cy * sz
    qnew.z = cx * cy * sz - sx * sy * cz
    qnew.w = cx * cy * cz + sx * sy * sz

    return qnew

#
def quat2eul(q):

    # Euler angle form of Quaternion input:
    Rx = np.arctan2(2 * (q.w * q.x + q.y * q.z), 1 - 2 * (q.x ** 2 + q.y ** 2))
    Ry = -0.5 * np.pi + 2 * np.arctan2(np.sqrt(1 + 2 * (q.w * q.y - q.x * q.z)), np.sqrt(1 - 2 * (q.w * q.y - q.x * q.z)))
    Rz = np.arctan2(2 * (q.w * q.z + q.x * q.y), 1 - 2 * (q.y ** 2 + q.z ** 2))

    return Rx, Ry, Rz

#
def quat_inv(q):

    # Inverse of Quaternion input:
    qnew = Quaternion()
    qnew.x = -q.x
    qnew.y = -q.y
    qnew.z = -q.z
    qnew.w = q.w

    return qnew

#
def quat_multiply(q1, q2):

    # Product of Quaternion input:
    qnew = Quaternion()
    qnew.x = (q1.w * q2.x) + (q1.x * q2.w) + (q1.y * q2.z) - (q1.z * q2.y)
    qnew.y = (q1.w * q2.y) - (q1.x * q2.z) + (q1.y * q2.w) + (q1.z * q2.x)
    qnew.z = (q1.w * q2.z) + (q1.x * q2.y) - (q1.y * q2.x) + (q1.z * q2.w)
    qnew.w = (q1.w * q2.w) - (q1.x * q2.x) - (q1.y * q2.y) - (q1.z * q2.z)

    return qnew

#
def quat_norm(q):

    # Normalized form of Quaternion input:
    norm = np.sqrt(q.x ** 2 + q.y ** 2 + q.z ** 2 + q.w ** 2)
    qnew = Quaternion()
    qnew.x = q.x / norm
    qnew.y = q.y / norm
    qnew.z = q.z / norm
    qnew.w = q.w / norm

    return qnew

#
def quat_print(q):

    # Quaternion input printed in terminal:
    rospy.loginfo("%.4f\t%.4f\t%.4f\t%.4f", q.x, q.y, q.z, q.w)

##################################################################################

if __name__=="__main__":

    # Initialize node:
    rospy.init_node("testcalibration")

    # Calibrate UAV:
    calibrateUAV()

#!/usr/bin/env python

import rospy

import json
import numpy as np
import os.path
import subprocess

##################################################################################

# Import vehicle config:
f = open(os.path.dirname(__file__) + "/../../json/config.json")
fData = json.load(f)

# User-define image log path:
savePath = "/home/ubuntu/catkin_ws/logs/jpg/"

##################################################################################

#
def getTimestamp(timestamps, counter):

    # Append timestamps with image:
    now = rospy.get_rostime()
    timestamps = np.vstack((timestamps, np.array([[f"{counter:04d}", now.secs]])))
    print(now.secs)
    
    return timestamps

#
def getFileName(counter):

    # Generate file name:
    name = "IMG" + f"{counter:04d}" + ".jpg"

    return name

#
def getFilePath(name):

    # Check if log path exists:
    if not os.path.exists(savePath):
        os.makedirs(savePath)

    # Generate file path:
    path = savePath + name

    return path

#
def getImage(path):

    # Generate shell command:
    command = "raspistill -o " + path
    
    # Execute shell command:
    subprocess.call(command, shell=True)

#
def logTimestamps(timestamps):

    #
    np.savetxt(savePath + "timestamps.csv", timestamps, delimiter=",", fmt="%s")

#
def main():
    
    # Initiate counter and time stamp storage:
    global timestamps
    timestamps = np.empty((0, 2))
    counter = 0

    # 
    rate = rospy.Rate(sample_rate)
    while not rospy.is_shutdown():

        # Generate image timestamp:
        timestamps = getTimestamp(timestamps, counter)

        # Generate file name:
        name = getFileName(counter)

        # Generate file path:
        path = getFilePath(name)

        # Log image:
        getImage(path)

        # Incremement counter:
        counter += 1
        rate.sleep()

##################################################################################

#
if __name__=="__main__":

    # Initialize node:
    rospy.init_node("messcv_rpicam_stills")

    # Retrieve config data:
    nameUAV = fData["uav_name"]
    sample_rate = fData["still_rate"]

    #
    try:

        # Sample images:
        main()
        rospy.spin()

        #
        rospy.on_shutdown(lambda: logTimestamps(timestamps))

    #
    except rospy.ROSInterruptException:
        pass
        
